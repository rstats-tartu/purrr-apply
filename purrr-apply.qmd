---
title: "purrr-apply"
subtitle: "LOTI.02.015 Reprodutseeritav andmeanalüüs R-keeles"
author: "Taavi Päll"
date: "2022-11-09"
format:
  revealjs: 
    theme: [serif]
---

```{r, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
```

## R Iterators -- Apply a Function over a List or Vector

- Iterator is "an object that enables a programmer to traverse a container".^[Wikipedia:  [https://en.wikipedia.org/wiki/Iterator](https://en.wikipedia.org/wiki/Iterator)]
- A collection of items (stashed in a container) can be thought of as being "iterable" (R sense container == vector, list).

:::aside
Source: 
:::

## Getting help

E.g. lapply/apply help can be accessed in R as usually from console:
```{r, eval=FALSE}
?apply
```
Or type in RStudio Help tab "apply"

## Essential part of iteraton is a function

Functions reduce duplication by identifying repeated patterns of code and extract them out into independent pieces that can be easily reused and updated.

Functions are defined in R like so (we also give it a name): 
```{r}
plos_one <- function(x) {
  x + 1
}
```


:::aside
Source: R for Data Science (R4DS), [https://r4ds.had.co.nz/iteration.html](https://r4ds.had.co.nz/iteration.html).
:::


## Why are functions important?

- It's easier to see the intent of your code, because your eyes are drawn to what's different, not what stays the same.
- It's easier to respond to changes in requirements. As your needs change, you only need to make changes in one place, rather than remembering to change every place that you copied-and-pasted the code.
- You're likely to have fewer bugs because each line of code is used in more places.

:::aside
Source: R for Data Science (R4DS), [https://r4ds.had.co.nz/iteration.html](https://r4ds.had.co.nz/iteration.html).
:::

## For loops

See: [https://r4ds.had.co.nz/iteration.html#for-loops](https://r4ds.had.co.nz/iteration.html#for-loops)

```{r, eval=FALSE}
output <- vector("double", ncol(df))  # 1. output
for (i in seq_along(df)) {            # 2. sequence
  output[[i]] <- median(df[[i]])      # 3. body
}
output
#> [1] -0.24576245 -0.28730721 -0.05669771  0.14426335
```


##  For loop variations {.smaller}

There are four variations on the basic theme of the for loop:

1. Modifying an existing object, instead of creating a new object.
2. Looping over values or names, instead of indices `for (v in x)` or `for (n in names(x))` vs. `for (i in seq_along(x))`.
3. Handling outputs of unknown length -- loop first, deal with output later.
4. Handling sequences of unknown length (`while`).

:::aside
Source: R for Data Science (R4DS), [https://r4ds.had.co.nz/iteration.html#for-loop-variations](https://r4ds.had.co.nz/iteration.html#for-loop-variations).
:::

## Functionals to replace for loops

- In R it’s possible and much advisable to wrap up for loops in a function, and call that function instead of using the for loop directly

## purrr and base R apply

- In base R, the apply family of functions (`apply()`, `lapply()`, `sapply()`, etc) allow to loop through objects.
- With more consistent API, Tidyverse **purrr** package provides functions that eliminate the need for many common for loops. 

## Why purrr or apply?

> The goal of using purrr/apply functions instead of for loops is to allow you to break common list manipulation challenges into independent pieces:
How can you solve the problem for a single element of the list? Once you’ve solved that problem, purrr/apply takes care of generalising your solution to every element in the list.

:::aside
Source: R for Data Science (R4DS), [https://r4ds.had.co.nz/iteration.html#for-loop-variations](https://r4ds.had.co.nz/iteration.html#for-loop-variations).
:::

## There is different map() function for each type of input

- `map()` outputs list
- `map_lgl()` outputs logical vector
- `map_int()` outputs integer vector
- `map_dbl()` outputs double vector
- `map_chr()` outputs character vector
- `map_df()` outputs dataframe

## How `map()` works

- Each function takes vector as input applies function to each element of the vector and outputs new vector with same length (and names) as the input.


```{r}
library(tidyverse)
?map
```


> The main benefit of using `map()` functions over loops is not speed but code clarity.

## Map to calculate column means over data frame {.smaller}

Let's create toy data frame:
```{r}
tb <- tibble(
  a = rnorm(10, 1),
  b = rnorm(10, 2),
  c = c(rnorm(6, 3), rep(NA_real_, 4)), # let's add some NAs
  d = c(rnorm(4, 4), rep(NA_real_, 6)),
)
```

Here we calculate column means over data frame:
```{r}
map_dbl(tb, mean)
```

> Previous code could be replaced by dplyr summarise functions or base R colSums(), at least when input is a data frame.

## There are differences between map_*() and colSums()

- purrr functions are implemented in C. This makes them a little faster at the expense of readability.

- The second argument, .f, the function to apply, can be a formula, a character vector, or an integer vector.

- map_*() uses ... ([dot dot dot]) to pass along additional arguments to .f each time it's called

:::aside
Source: R for Data Science (R4DS), [https://r4ds.had.co.nz/iteration.html#for-loop-variations](https://r4ds.had.co.nz/iteration.html#for-loop-variations).
:::

## The second arument {.smaller}

- **.f** -- A function, formula, or vector (not necessarily atomic).

  - If a function, it is used as is.
  - If a formula, e.g. ~ .x + 2, it is converted to a function. There are three ways to refer to the arguments:
    - For a single argument function, use .
    - For a two argument function, use .x and .y
    - For more arguments, use ..1, ..2, ..3 etc
  - If character vector, numeric vector, or list, it is converted to an extractor function. Character vectors index by name and numeric vectors index by position.

:::aside
Source: purrr reference: Apply a function to each element of a list or atomic vector, [https://purrr.tidyverse.org/reference/map.html](https://purrr.tidyverse.org/reference/map.html).
:::


## map Examples

See: [https://purrr.tidyverse.org/reference/map.html#ref-examples](https://purrr.tidyverse.org/reference/map.html#ref-examples)


## Ellipsis allows to pass additional arguments

- Let's pass `na.rm=TRUE` to mean function (in this example nothing changes because we have no NAs in out data)
```{r}
map_dbl(tb, mean, na.rm = TRUE)
```

- Note that additional arguments are named.


## Example of using map inside pipe

- Let's find how life expectancy has changed in different countries and how it's related to country GDP, based on **gapminder** dataset.

- Split data by country and fit same linear model to all pieces:
  
```{r}
library(gapminder)
models <- gapminder %>% 
  split(.$country) %>% 
  map(function(x) lm(lifeExp ~ year + gdpPercap, data = x))
```

## Syntax to create anonymous function is verbose

- Consider following anonymous function^[*lambda* in Python]
```{r, eval=FALSE}
function(x) lm(lifeExp ~ year + gdpPercap, data = x)
```


:::aside
:::

## purrr allows to use one-sided formula as drop-in replacement

```{r}
models <- gapminder %>% 
  split(.$country) %>% 
  map(~ lm(lifeExp ~ year + gdpPercap, data = .))
```

## Subsetting/indexing

Let's have look at model summaries of all these models:

We can extract "r.squared" component from model summary:
```{r}
models %>% 
  map(summary) %>% 
  map_dbl(~.$r.squared)
```

## more conveniently with purrr, you can directly extract a named component

```{r}
models %>% 
  map(summary) %>% 
  map_dbl("r.squared")
```


## Base R

- `lapply()` is basically identical to `map()`, except that `map()` is consistent with all the other functions in purrr, and you can use the shortcuts for .f.
- `sapply()` is a wrapper around `lapply()` that automatically simplifies the output.
- `vapply()` is a safe alternative to `sapply()` because you supply an additional argument that defines the type e.g. `vapply(df, is.numeric, logical(1))` is equivalent to `map_lgl(df, is.numeric)`.

## map Exercises

See: [https://purrr.tidyverse.org/reference/map.html#ref-examples](https://purrr.tidyverse.org/reference/map.html#ref-examples)


## Dealing with failure

One bad apple can spoil the whole bunch. 

- If one out of many iterations fail, then you will get error message and no output. This is annoying, as one failure prevents you from accessing all successful calculations.
- **purrr** handles these situations with `safely()` function.

## Safely is just a wrapper

- `safely()` takes a function and returns its modified version wrapped into error handler. 
- safely-modified function will never throw an error, but returns a list with two elements:
  - "result" - the original result and in case of error NULL
  - "error" - error object and when operation was successful, returns NULL
  - One of the list objects returned by safely is allways NULL

## Example

Let's create safe log function:
```{r}
safe_log <- safely(log)
```

In case of success:
```{r}
safe_log(10)
```

In case of error:
```{r}
safe_log("10")
```

## Safely works with map

```{r}
x <- list(1, 10, "10")
y <- x %>% map(safe_log)
y
```


## Reorganise list with transpose {.smaller}

- You can get then two lists one for results and the other one for errors with purrr::transpose()

```{r}
y <- y %>% transpose()
y
```

- Transposed list can be subset to get good results
  
```{r}
good <- y$error %>% map_lgl(is.null)
y$result[good] # bad apple in original data
```

- Extract good results and flatten into numeric vector
```{r}
y$result[good] %>% flatten_dbl()
```

## Flatten functions

- **purrr** `flatten()` removes one level of hierarchy from a list

```{r}
?purrr::flatten
```

## How to use map inside tibbles

- Fitting function to nested data

```{r}
gapmodels <- gapminder %>% 
  group_by(country) %>% 
  nest() %>% 
  mutate(model = map(data, ~ lm(lifeExp ~ year + gdpPercap, data = .x)))
```

## Getting summaries from nested data

```{r}
gapmodels %>% 
  mutate(msum = map(model, summary),
         rsq = map_dbl(msum, "r.squared")) %>% 
  arrange(rsq)
```

## Tidy summary of your models

```{r}
library(broom)
estimates <- gapmodels %>% 
  mutate(tidyfit = map(model, tidy)) %>% 
  select(country, tidyfit) %>% 
  unnest(tidyfit)
estimates
```

- Logarithmic mean of global GDP

```{r}
exp(mean(log(gapminder$gdpPercap)))
```


## Mapping over multiple arguments

- `map2()` and `pmap()` functions allow to map over multiple arguments

See [https://r4ds.had.co.nz/iteration.html#mapping-over-multiple-arguments](https://r4ds.had.co.nz/iteration.html#mapping-over-multiple-arguments)



